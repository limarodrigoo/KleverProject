// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/voting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingServiceClient interface {
	CreateCrypto(ctx context.Context, in *CryptoCreateReq, opts ...grpc.CallOption) (*CreateCryptoRes, error)
	GetCrypto(ctx context.Context, in *GetCryptoReq, opts ...grpc.CallOption) (*Crypto, error)
	UpvoteCrypto(ctx context.Context, in *UpvoteCryptoReq, opts ...grpc.CallOption) (*UpvoteCryptoRes, error)
	DownvoteCrypto(ctx context.Context, in *DownvoteCryptoReq, opts ...grpc.CallOption) (*DownvoteCryptoRes, error)
	DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error)
	ListCryptos(ctx context.Context, in *ListCryptosReq, opts ...grpc.CallOption) (VotingService_ListCryptosClient, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) CreateCrypto(ctx context.Context, in *CryptoCreateReq, opts ...grpc.CallOption) (*CreateCryptoRes, error) {
	out := new(CreateCryptoRes)
	err := c.cc.Invoke(ctx, "/VotingService/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) GetCrypto(ctx context.Context, in *GetCryptoReq, opts ...grpc.CallOption) (*Crypto, error) {
	out := new(Crypto)
	err := c.cc.Invoke(ctx, "/VotingService/GetCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) UpvoteCrypto(ctx context.Context, in *UpvoteCryptoReq, opts ...grpc.CallOption) (*UpvoteCryptoRes, error) {
	out := new(UpvoteCryptoRes)
	err := c.cc.Invoke(ctx, "/VotingService/UpvoteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) DownvoteCrypto(ctx context.Context, in *DownvoteCryptoReq, opts ...grpc.CallOption) (*DownvoteCryptoRes, error) {
	out := new(DownvoteCryptoRes)
	err := c.cc.Invoke(ctx, "/VotingService/DownvoteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error) {
	out := new(DeleteCryptoRes)
	err := c.cc.Invoke(ctx, "/VotingService/DeleteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) ListCryptos(ctx context.Context, in *ListCryptosReq, opts ...grpc.CallOption) (VotingService_ListCryptosClient, error) {
	stream, err := c.cc.NewStream(ctx, &VotingService_ServiceDesc.Streams[0], "/VotingService/ListCryptos", opts...)
	if err != nil {
		return nil, err
	}
	x := &votingServiceListCryptosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VotingService_ListCryptosClient interface {
	Recv() (*ListCryptosRes, error)
	grpc.ClientStream
}

type votingServiceListCryptosClient struct {
	grpc.ClientStream
}

func (x *votingServiceListCryptosClient) Recv() (*ListCryptosRes, error) {
	m := new(ListCryptosRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VotingServiceServer is the server API for VotingService service.
// All implementations must embed UnimplementedVotingServiceServer
// for forward compatibility
type VotingServiceServer interface {
	CreateCrypto(context.Context, *CryptoCreateReq) (*CreateCryptoRes, error)
	GetCrypto(context.Context, *GetCryptoReq) (*Crypto, error)
	UpvoteCrypto(context.Context, *UpvoteCryptoReq) (*UpvoteCryptoRes, error)
	DownvoteCrypto(context.Context, *DownvoteCryptoReq) (*DownvoteCryptoRes, error)
	DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error)
	ListCryptos(*ListCryptosReq, VotingService_ListCryptosServer) error
	mustEmbedUnimplementedVotingServiceServer()
}

// UnimplementedVotingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (UnimplementedVotingServiceServer) CreateCrypto(context.Context, *CryptoCreateReq) (*CreateCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (UnimplementedVotingServiceServer) GetCrypto(context.Context, *GetCryptoReq) (*Crypto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrypto not implemented")
}
func (UnimplementedVotingServiceServer) UpvoteCrypto(context.Context, *UpvoteCryptoReq) (*UpvoteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteCrypto not implemented")
}
func (UnimplementedVotingServiceServer) DownvoteCrypto(context.Context, *DownvoteCryptoReq) (*DownvoteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownvoteCrypto not implemented")
}
func (UnimplementedVotingServiceServer) DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrypto not implemented")
}
func (UnimplementedVotingServiceServer) ListCryptos(*ListCryptosReq, VotingService_ListCryptosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCryptos not implemented")
}
func (UnimplementedVotingServiceServer) mustEmbedUnimplementedVotingServiceServer() {}

// UnsafeVotingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServiceServer will
// result in compilation errors.
type UnsafeVotingServiceServer interface {
	mustEmbedUnimplementedVotingServiceServer()
}

func RegisterVotingServiceServer(s grpc.ServiceRegistrar, srv VotingServiceServer) {
	s.RegisterService(&VotingService_ServiceDesc, srv)
}

func _VotingService_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingService/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).CreateCrypto(ctx, req.(*CryptoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_GetCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).GetCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingService/GetCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).GetCrypto(ctx, req.(*GetCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_UpvoteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).UpvoteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingService/UpvoteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).UpvoteCrypto(ctx, req.(*UpvoteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_DownvoteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownvoteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).DownvoteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingService/DownvoteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).DownvoteCrypto(ctx, req.(*DownvoteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_DeleteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).DeleteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VotingService/DeleteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).DeleteCrypto(ctx, req.(*DeleteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_ListCryptos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCryptosReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VotingServiceServer).ListCryptos(m, &votingServiceListCryptosServer{stream})
}

type VotingService_ListCryptosServer interface {
	Send(*ListCryptosRes) error
	grpc.ServerStream
}

type votingServiceListCryptosServer struct {
	grpc.ServerStream
}

func (x *votingServiceListCryptosServer) Send(m *ListCryptosRes) error {
	return x.ServerStream.SendMsg(m)
}

// VotingService_ServiceDesc is the grpc.ServiceDesc for VotingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrypto",
			Handler:    _VotingService_CreateCrypto_Handler,
		},
		{
			MethodName: "GetCrypto",
			Handler:    _VotingService_GetCrypto_Handler,
		},
		{
			MethodName: "UpvoteCrypto",
			Handler:    _VotingService_UpvoteCrypto_Handler,
		},
		{
			MethodName: "DownvoteCrypto",
			Handler:    _VotingService_DownvoteCrypto_Handler,
		},
		{
			MethodName: "DeleteCrypto",
			Handler:    _VotingService_DeleteCrypto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCryptos",
			Handler:       _VotingService_ListCryptos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/voting.proto",
}
